 

EXAMPLES OF CONSTRAINT PROGRAMMING FORMULATIONS

flowshp0.mod	Flowshop problem, using n2 zero-one variables
flowshp1.mod	. . . instead using n integer variables, with the or operator
flowshp2.mod	. . . instead using n integer variables, with the if-then operator
jobassign0.mod	Job assignment problem, using n2 zero-one variables
jobassign1.mod	. . . instead using n integer variables, with alldiff operator
jobassign2.mod	. . . also using a variable as a subscript in the objective
jobassign3.mod	. . . instead using n object-valued variables
sched0.mod	Job scheduling problem, using n2 zero-one variables
sched1.mod	. . . instead using n integer variables, with the count operator
sched2.mod	. . . instead using n integer variables, with the countof operator
seq0.mod	Job sequencing problem, using n2 zero-one variables
seq1.mod	. . . instead using 2n integer variables, with variables in subscripts
seq2.mod	. . . also using min in constraint to define the finish times
seq0a.mod	Like seq0.mod, but using a set of objects for jobs
seq1a.mod	Like seq1.mod, but using object-valued variables for jobs


GROUP ASSIGNMENT
assign0.mod/dat/run -- 
   integer program for assignment of students to project groups
assign1.mod/dat/run -- 
   constraint program for assignment of students to project groups.
   using "numberof" operator
assign1a.mod/dat -- 
   same but with object-valued (specifically, project-valued) variables

BALANCED GROUP ASSIGNMENT
balassign0.mod/dat --
   integer program for assignment of people to groups 
   so that each group is "balanced" by various criteria
balassign1.mod/dat --
   constraint program for balanced assignment of people to groups,
   using "numberof" operator

MAGIC SEQUENCE
magic.mod -- 
   constraint program for finding a magic sequence of length n+1
   (jth number in the sequence equals number of js in the sequence)
   using "numberof" operator

N QUEENS
nqueens0.mod --
   integer program for the n queens problem: put n queens on an
   n-by-n chessboard so that no queen is attacking any other queen
nqueens.mod --
   constraint program for the n queens problem,
   using the "alldiff" operator

PROGRESSIVE PARTY PROBLEM
party1.mod/dat --
   constraint program for the progressive party problem,
   using "alldiff", "atmost", "if-then", "!=" as logic operators
party2.mod/dat -- 
   alternative constraint program using "==>" as an "implies" op
[for a MIP formulation see E. Kalvelagen, 
   Computers and Operations Research 30 (2003) 1713-1726]

PLANT SCHEDULING
plantsched5.mod/dat --
   integer program for plant scheduling subject to various rules
plantsched5a.mod/dat --
   constraint program for the same, using "atmost" and "or"
   and avoiding all zero-one variables

Sources
-------

flowshop: J.N. Hooker and M.A. Osorio, "Mixed Logical/Linear Programming."
          Technical report, Carnegie Mellon University, Pittsburgh,
          PA (July 1996).

seq:      C. Jordan and A. Drexl, "A Comparison of Constraint and
          Mixed-Integer Programming Solvers for Batch Sequencing with
          Sequence-Dependent Setups." ORSA Journal on Computing 7 (1995)
          160-165.
